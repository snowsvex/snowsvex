/* src/articles/test.svx generated by Svelte v3.35.0 */
import {
	SvelteComponentDev,
	add_location,
	append_dev,
	children,
	claim_element,
	claim_space,
	claim_text,
	detach_dev,
	dispatch_dev,
	element,
	init,
	insert_dev,
	noop,
	safe_not_equal,
	space,
	text,
	validate_slots
} from "../_snowpack/pkg/svelte/internal.js";

const file = "src/articles/test.svx";

function create_fragment(ctx) {
	let h1;
	let t0;
	let t1;
	let blockquote;
	let p;
	let t2;

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text("Amazzzing");
			t1 = space();
			blockquote = element("blockquote");
			p = element("p");
			t2 = text("Cool stuff");
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Amazzzing");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			blockquote = claim_element(nodes, "BLOCKQUOTE", {});
			var blockquote_nodes = children(blockquote);
			p = claim_element(blockquote_nodes, "P", {});
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, "Cool stuff");
			p_nodes.forEach(detach_dev);
			blockquote_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file, 5, 0, 137);
			add_location(p, file, 7, 0, 169);
			add_location(blockquote, file, 6, 0, 156);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, blockquote, anchor);
			append_dev(blockquote, p);
			append_dev(p, t2);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(blockquote);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const metadata = {
	"title": "Awesome title",
	"x": 1,
	"y": 20
};

const { title, x, y } = metadata;

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Test", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Test> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ metadata, title, x, y });
	return [];
}

class Test extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Test",
			options,
			id: create_fragment.name
		});
	}
}

export default Test;
export { metadata };